'use strict';
/**
 * To build the pages on the site, we compile content (pages, posts) against
 * templates. There are two types of context given to a template when it
 * renders.
 *
 * One is a "shared context"â€”that's a single context we give to
 * all templates on the site. That context is generated by `template-data.js`
 *
 * This second kind of context is a "local context", a context object generated
 * JUST for this piece of content (as identified by its filePath).
 *
 * Primarily this local context is:
 * 1. Am I a post or a page?
 * 2. If I'm a post, munge my data and prepare me for the web @see post-data
 *
 * The complexity of this may increase if we end up with other content types
 * beyond pages and posts.
 */

// @TODO Remove reliance on config
var config    = require('../config');
var path      = require('path');

var postContext = require('./post-data');

/**
 * Build the "local Context" for this content at filePath
 * and determine what kind of content it is (post vs. page).
 *
 * @param filePath {String}     Full path to content file
 * @param attributes {Object}   Front-matter attributes for this file
 *
 * @return {Object}              Attributes extended with local context
 */
var localContext = function (filePath, attributes) {
  var postPath   = path.normalize(config.blog.postDir);
  if (filePath.indexOf(postPath) !== -1) { // It's a post
    attributes = postContext(attributes, config);
    attributes.isPost = true;
    attributes.contentType = 'post';
    return attributes;
  } else { // it's a page
    // extend when needed
    attributes.isPage = true;
    attributes.contentType = 'page';
    return attributes;
  }
};

module.exports = localContext;
